{"version":3,"sources":["main.js"],"names":["backToTopBtn","document","getElementById","addEventListener","body","scrollTop","documentElement","add","classList","remove","e","preventDefault","scrollTo","top","behavior","footer","querySelector","rect","getBoundingClientRect","window","innerHeight","clientHeight","bottom","isInViewport","animateOnScroll","querySelectorAll","transform","link","style","transition","item","otherItem","faqItems","forEach","contactForm","contains","originalText","submitBtn","textContent","setTimeout","backgroundColor","disabled","reset","event","console","error","message","location","href","reason"],"mappings":"aACM,IAAMA,aAAeC,SAASC,eAAe,aAAvCF,OAAAA,iBAAwBE,SAAAA,WAEI,IAA3BC,SAAPC,KAAwBC,WAAgB,IAAAJ,SAAAK,gBAAAD,UACxBL,aAAMK,UAAdE,IAAiCN,UAE9BD,aAAAQ,UAAAC,OAAA,YAKXT,aAAaG,iBAAiB,QAAS,SAAAO,GACjCC,EAAAA,iBACKC,OAAPA,SAAgB,CAAAC,IAAA,EAEFC,SAAA,aAMdb,SAAAE,iBAAA,mBAAA,WAcQY,SAAOP,IACV,IAAAO,EAAAd,SAAAe,cAAA,WAbKC,SAAeC,GAEjBD,IAAAA,EAAaE,EAAOC,wBAK5B,OALQH,EAAKJ,MAAQM,OAAOC,aAAenB,SAASK,gBAAgBe,eAC7C,GAAfJ,EAAKK,OAQLC,CAAaR,IACbA,EAAOP,UAAUD,IAAI,WAWrBiB,IACCrB,OAAAA,iBAAiB,SAAcqB,GAApCvB,SAAAwB,iBAAA,SAMeC,QAAX,SAAAC,GADJA,EAAAxB,iBAAA,aAAA,WANJwB,EAAAC,MAAAC,WAAA,WA1BJF,EAAAC,MAAAF,UAAA,qBAwCgBC,EAAG1B,iBAASwB,aAAiB,WAE3CE,EAAiBC,MAAAE,UAAQ,sBAMb7B,SAAI8B,iBAAA,mBAAgCvB,WAEnC,IAAAwB,EAAA/B,SAAAwB,iBAAA,aARbO,EAASC,QAAQ,SAAAH,GAYaA,EAAAd,cAAtB,iBAIRb,iBAAA,QAAA,WACM+B,EAAcjC,QAASC,SAAAA,GAXb6B,IAAcD,GAAQC,EAAUvB,UAAU2B,SAAS,WAalDJ,EAAAvB,UAAAC,OAAA,YAMH2B,EAAAA,UAAeC,OAAUC,cAO3BD,IAAAA,EAAUC,SAAcpC,eAAxB,gBAbRgC,GAiBQK,EAAWpC,iBAAM,SAAA,SAAAO,GACbwB,EAAAA,iBAGAG,IAAUT,EAAMY,KAAAA,cAAhB,eAJJJ,EAAAC,EAAAC,YAhBRD,EAAAC,YAAA,oBAwBHD,EAAAI,UAAA,EAIFtC,WAAiB,WACtBkC,EAAAC,YAAA,qBACcD,EAAAT,MAAdY,gBAEA,UAIFD,WAAA,WAnBwBL,EAAYQ,QAoBZL,EAAAC,YAAsBF,EAC9BC,EAAAI,UAAyBE,EACvCN,EAAuBT,MAAvBY,gBAAA,IAFF,MAfmB,UAMnBrB,OAAOhB,iBAAiB,QAAS,SAAUwC,GAEzCC,QAAQC,MAAM,oBAAqBF,EAAMG,SAGzC3B,OAAO4B,SAASC,KAAO,eAIzB7B,OAAOhB,iBAAiB,qBAAsB,SAAUwC,GACtDC,QAAQC,MAAM,wBAAyBF,EAAMM,QAC7C9B,OAAO4B,SAASC,KAAO","file":"main.min.js","sourcesContent":["      // Script per il pulsante \"Torna su\"\r\n      const backToTopBtn = document.getElementById('backToTop');\r\n      \r\n      window.addEventListener('scroll', () => {\r\n          if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {\r\n              backToTopBtn.classList.add('active');\r\n          } else {\r\n              backToTopBtn.classList.remove('active');\r\n          }\r\n      });\r\n      \r\n      backToTopBtn.addEventListener('click', (e) => {\r\n          e.preventDefault();\r\n          window.scrollTo({\r\n              top: 0,\r\n              behavior: 'smooth'\r\n          });\r\n      });\r\n      \r\n      // Animazione quando gli elementi del footer diventano visibili\r\n      document.addEventListener('DOMContentLoaded', () => {\r\n          // Funzione per controllare se un elemento Ã¨ nel viewport\r\n          function isInViewport(element) {\r\n              const rect = element.getBoundingClientRect();\r\n              return (\r\n                  rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&\r\n                  rect.bottom >= 0\r\n              );\r\n          }\r\n          \r\n          // Animazione per gli elementi all'ingresso nel viewport\r\n          function animateOnScroll() {\r\n              const footer = document.querySelector('footer');\r\n              \r\n              if (isInViewport(footer)) {\r\n                  footer.classList.add('visible');\r\n              }\r\n          }\r\n          \r\n          // Check iniziale e listener per lo scroll\r\n          animateOnScroll();\r\n          window.addEventListener('scroll', animateOnScroll);\r\n          \r\n          // Effetto hover per i link del menu di navigazione\r\n          const navLinks = document.querySelectorAll('nav a');\r\n          \r\n          navLinks.forEach(link => {\r\n              link.addEventListener('mouseenter', () => {\r\n                  link.style.transition = 'all 0.3s';\r\n                  link.style.transform = 'translateY(-3px)';\r\n              });\r\n              \r\n              link.addEventListener('mouseleave', () => {\r\n                  link.style.transform = 'translateY(0)';\r\n              });\r\n          });\r\n      });\r\n\r\n      document.addEventListener('DOMContentLoaded', function() {\r\n        // Gestione delle FAQ\r\n        const faqItems = document.querySelectorAll('.faq-item');\r\n        \r\n        faqItems.forEach(item => {\r\n            const question = item.querySelector('.faq-question');\r\n            \r\n            question.addEventListener('click', () => {\r\n                // Chiudi tutti gli altri elementi\r\n                faqItems.forEach(otherItem => {\r\n                    if (otherItem !== item && otherItem.classList.contains('active')) {\r\n                        otherItem.classList.remove('active');\r\n                    }\r\n                });\r\n                \r\n                // Apri/chiudi l'elemento corrente\r\n                item.classList.toggle('active');\r\n            });\r\n        });\r\n        \r\n        // Gestione del form di contatto\r\n        const contactForm = document.getElementById('contact-form');\r\n        \r\n        if (contactForm) {\r\n            contactForm.addEventListener('submit', function(e) {\r\n                e.preventDefault();\r\n                \r\n                // Qui andrebbe l'invio del form, per ora solo un feedback visivo\r\n                const submitBtn = this.querySelector('.btn-submit');\r\n                const originalText = submitBtn.textContent;\r\n                \r\n                submitBtn.textContent = 'Invio in corso...';\r\n                submitBtn.disabled = true;\r\n                \r\n                // Simulazione di invio\r\n                setTimeout(() => {\r\n                    submitBtn.textContent = 'Messaggio Inviato!';\r\n                    submitBtn.style.backgroundColor = '#27ae60';\r\n                    \r\n                    // Reset del form dopo l'invio\r\n                    setTimeout(() => {\r\n                        contactForm.reset();\r\n                        submitBtn.textContent = originalText;\r\n                        submitBtn.disabled = false;\r\n                        submitBtn.style.backgroundColor = '';\r\n                    }, 2000);\r\n                }, 1500);\r\n            });\r\n        }\r\n    });\r\n    \r\n    // Gestione globale degli errori\r\nwindow.addEventListener('error', function (event) {\r\n  // Puoi anche loggare l'errore su un server prima del redirect, se necessario\r\n  console.error('Errore catturato:', event.message);\r\n\r\n  // Reindirizzamento alla pagina di errore\r\n  window.location.href = 'error.html';\r\n});\r\n\r\n// Gestione errori promesse non gestite (es. async/await)\r\nwindow.addEventListener('unhandledrejection', function (event) {\r\n  console.error('Promessa non gestita:', event.reason);\r\n  window.location.href = './404.html';\r\n});\r\n"]}